===================================================================
파일 이름 : 소스.cpp
파일크기 : 1662
저장 시간 : 2022-03-02 17:11:22 GMT+9
===================================================================
파일 이름 : 소스.cpp
파일크기 : 1809
저장 시간 : 2022-03-02 17:14:58 GMT+9
//----------------------------------------------------------------------------------------
// 2022. 1학기 STL 3월 2일 수요일
// 수78목23 (1주 1일)
// 
// - 강의 소개
// - cppreference.com
// - google coding convention을 참고
// - 프로젝트 환경설정 통일
// 
// 할일 - 한학기 코딩한 내용을 저장할 수 있게 save 기능 완성
//----------------------------------------------------------------------------------------

#include <iostream>
#include <string_view>
#include <filesystem>
#include <chrono>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

//void save(const char*)
//void save(const string&)
void save(string_view fname)
{

	// 읽을 파일을 연다
	// 쓸 파일을 연다.
	ifstream in{ fname.data() };
	ofstream out{ "2022.1학기 STL 수78목23 강의저장.txt" , ios::app };

	// 저장할 파일 이름과 크기를 출력한다.
	out << "===================================================================" << endl;
	out << "파일 이름 : " << fname << endl;
	out << "파일크기 : " << filesystem::file_size(fname) << endl;

	// 현재 날짜와 시간(C++20)을 출력한다.
	auto time = floor<chrono::seconds>(chrono::system_clock::now());
	out << "저장 시간 : " << chrono::zoned_time("Asia/Seoul", time) << endl;

	// 읽은 파일을 강의저장 파일에 덧붙인다.
	// 1. 벡터에 파일을 읽어온다.
	//vector<char> v{ istream_iterator<char>{in},{} };
	vector<char> v{ istreambuf_iterator<char>{in},{} };

	// 2. copy 알고리즘을 이용해 벡터에 있는 글자를 가으이저장파일로 복사한다,
	copy(v.begin(), v.end(), ostream_iterator<char>{out});
}

int main()
{
	// string과 string_view의 크기 확인
	// 서로의 크기가 다른 이유?
	string a;
	string_view b;
	cout << "string의 크기 - " << sizeof(a) << endl << "string_view의 크기 - " << sizeof(b) << endl;
	save("소스.cpp");
}
===================================================================
파일 이름 : 소스.cpp
파일크기 : 692
저장 시간 : 2022-03-03 10:47:27 GMT+9
//----------------------------------------------------------------------------------------
// 2022. 1학기 STL 3월 3일 목요일
// 수78목23 (1주 2일)
// 
// 
// 할일 - 어제 코딩한 save 함수를 save.cpp로 분리한 후 실행되도록 수정
// 
//----------------------------------------------------------------------------------------

#include <iostream>
#include <string_view>
#include <filesystem>
#include <chrono>
#include <fstream>
#include <vector>
#include <algorithm>

#include "save.h"

using namespace std;

int main()
{
	string a;
	string_view b;
	cout << "string의 크기 - " << sizeof(a) << endl << "string_view의 크기 - " << sizeof(b) << endl;
	save("소스.cpp");
}
===================================================================
파일 이름 : save.h
파일크기 : 76
저장 시간 : 2022-03-03 11:03:43 GMT+9
#pragma once

#include <string_view>

void save(std::string_view fname);===================================================================
파일 이름 : save.cpp
파일크기 : 1563
저장 시간 : 2022-03-03 11:03:43 GMT+9
//----------------------------------------------------------------------------------------
// SAVE.CPP
// 
// 이 함수를 호출하면 "2022.1학기 STL 수78목23 강의저장.txt"에
// 전달된 이름의 파일을 읽어 덧붙인다.
// 2022. 3. 3								BY JHT
//----------------------------------------------------------------------------------------

#include <iostream>
#include <filesystem>
#include <chrono>
#include <fstream>
#include <vector>
#include <algorithm>

#include "save.h"

//void save(const char*)
//void save(const string&)
void save(std::string_view fname)
{

	// 읽을 파일을 연다 - RALL
	std::ifstream in{ fname.data() };


	// 쓸 파일을 연다.
	std::ofstream out{ "2022.1학기 STL 수78목23 강의저장.txt" , std::ios::app };

	// 저장할 파일 이름과 크기(C++17)를 출력한다.
	out << "===================================================================" << std::endl;
	out << "파일 이름 : " << fname << std::endl;
	out << "파일크기 : " << std::filesystem::file_size(fname) << std::endl;

	// 현재 날짜와 시간(C++20)을 출력한다.
	auto time = floor<std::chrono::seconds>(std::chrono::system_clock::now());
	out << "저장 시간 : " << std::chrono::zoned_time("Asia/Seoul", time) << std::endl;

	// 읽은 파일을 강의저장 파일에 덧붙인다.

	// 1. 벡터에 파일을 읽어온다. - 컨테이너
	//vector<char> v{ istream_iterator<char>{in},{} };
	std::vector<char> v{ std::istreambuf_iterator<char>{in},{} };

	// 2. copy 알고리즘을 이용해 벡터에 있는 글자를 강의저장파일로 복사한다,
	copy(v.begin(), v.end(), std::ostream_iterator<char>{out});
}===================================================================
파일 이름 : 소스.cpp
파일크기 : 475
저장 시간 : 2022-03-03 11:03:43 GMT+9
//----------------------------------------------------------------------------------------
// 2022. 1학기 STL 3월 3일 목요일
// 수78목23 (1주 2일)
// 
// 
// 할일 - 어제 코딩한 save 함수를 save.cpp로 분리한 후 실행되도록 수정
// 
//----------------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;

int main()
{
	save("save.h");
	save("save.cpp");
	save("소스.cpp");
}

===================================================================
파일 이름 : 소스.cpp
파일크기 : 687
저장 시간 : 2022-03-03 11:19:56 GMT+9
//----------------------------------------------------------------------------------------
// 2022. 1학기 STL 3월 3일 목요일
// 수78목23 (1주 2일)
// 
// 
// 할일 - 어제 코딩한 save 함수를 save.cpp로 분리한 후 실행되도록 수정
// 
//----------------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;

void change(int& a, int& b)
{
	int tmp;
	tmp = a;
	a = b;
	b = tmp;
}

// [문제] main()을 변경하면 안된다.
// 실행하면 a와 b의 값이 서로 바껴야 한다.
//

int main()
{
	int a{ 1 };
	int b{ 2 };

	change(a, b);

	cout << a << ", " << b << endl;

	save("소스.cpp");
}
===================================================================
파일 이름 : 소스.cpp
파일크기 : 1013
저장 시간 : 2022-03-03 11:37:24 GMT+9
//----------------------------------------------------------------------------------------
// 2022. 1학기 STL 3월 3일 목요일
// 수78목23 (1주 2일)
// 
// 
// 할일 - 어제 코딩한 save 함수를 save.cpp로 분리한 후 실행되도록 수정
// 
//----------------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;

// 교수님 답
void change(int&, int&);

// 내 답
//void change(int& a, int& b)
//{
//	int tmp{};
//	tmp = a;
//	a = b;
//	b = tmp;
//}

// [문제] main()을 변경하면 안된다.
// 실행하면 a와 b의 값이 서로 바껴야 한다.
// 참조인자로 전달하지 않으면 매개변수를 복사본으로 전달해 함수에서 바꾸어도 원본인 변수의 값은 변경되지 않는다.
// 클래스 안에서 레퍼런스는 복사본이 아닌 원본을 이용하라는 뜻이다.

int main()
{
	int a{ 1 };
	int b{ 2 };

	change(a, b);

	cout << a << ", " << b << endl;

	save("소스.cpp");
}

void change(int& a, int& b)
{
	int tmp{};
	tmp = a;
	a = b;
	b = tmp;
}


===================================================================
파일 이름 : 소스.cpp
파일크기 : 1063
저장 시간 : 2022-03-03 12:17:48 GMT+9
//----------------------------------------------------------------------------------------
// 2022. 1학기 STL 3월 3일 목요일
// 수78목23 (1주 2일)
// 
// 
// 할일 - 어제 코딩한 save 함수를 save.cpp로 분리한 후 실행되도록 수정
// 
// &의 의미를 복습
// class를 복습
// 
//----------------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;

class Dog
{
	int a;
public:
	Dog() {};
	//Dog(int i) { a = i; };
	Dog(int i) : a{ i } {};

	friend ostream& operator<<(ostream&, const Dog& );
};

ostream& operator<<(ostream& os, const Dog& d)
{
	os << d.a;
	return os;
}

template<typename T>
void change(T& a, T& b)
{
	T tmp{};
	tmp = a;
	// 클래스가 선언될 때, operator=은 자동으로 생성된다. 
	// a.operator=(b);
	a = b;
	b = tmp;
}

// [문제] main()을 변경하면 안된다.
// 실행하면 a와 b의 값이 서로 바껴야 한다.

int main()
{
	Dog a{ 1 };
	Dog b{ 2 };

	change(a, b);

	cout << a << ", " << b << endl;

	save("소스.cpp");
}



===================================================================
파일 이름 : 소스.cpp
파일크기 : 1128
저장 시간 : 2022-03-03 12:20:21 GMT+9
//----------------------------------------------------------------------------------------
// 2022. 1학기 STL 3월 3일 목요일
// 수78목23 (1주 2일)
// 
// 
// 할일 - 어제 코딩한 save 함수를 save.cpp로 분리한 후 실행되도록 수정
// 
// &의 의미를 복습
// class를 복습
// 
//----------------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;

class Dog
{
	int a;
public:
	Dog() {};
	//Dog(int i) { a = i; };
	Dog(int i) : a{ i } {};

	//friend ostream& operator<<(ostream&, const Dog& );
	
	// 야매기술
	operator int() {
		return a;
	}
};

//ostream& operator<<(ostream& os, const Dog& d)
//{
//	os << d.a;
//	return os;
//}

template<typename T>
void change(T& a, T& b)
{
	T tmp{};
	tmp = a;
	// 클래스가 선언될 때, operator=은 자동으로 생성된다. 
	// a.operator=(b);
	a = b;
	b = tmp;
}

// [문제] main()을 변경하면 안된다.
// 실행하면 a와 b의 값이 서로 바껴야 한다.

int main()
{
	Dog a{ 1 };
	Dog b{ 2 };

	change(a, b);

	cout << a << ", " << b << endl;

	save("소스.cpp");
}



===================================================================
파일 이름 : 소스.cpp
파일크기 : 926
저장 시간 : 2022-03-10 10:38:44 GMT+9
//----------------------------------------------------------------------------------------
// 2022. 1학기 STL 3월 10일 목요일
// 수78목23 (2주 1일)
// 
// 
// 할일 - 어제 코딩한 save 함수를 save.cpp로 분리한 후 실행되도록 수정
// 
// &의 의미를 복습
// class를 복습
// 
//----------------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;

template<typename T>
void change(T& a, T& b)
{
	T tmp{};
	tmp = a;
	// 클래스가 선언될 때, operator=은 자동으로 생성된다. 
	// a.operator=(b);
	a = b;
	b = tmp;
}

// [문제] change를 한번만 선언하고 정의하여 
// main이 수정 없이 실행되도록 해보자.

int main()
{
	{
		
		int a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << endl;
	}
	{
		string a{ "1"s }, b{ "2"s };
		change(a, b);
		cout << a << ", " << b << endl;
	}

	save("소스.cpp");
}



===================================================================
파일 이름 : 소스.cpp
파일크기 : 1269
저장 시간 : 2022-03-10 11:46:28 GMT+9
//----------------------------------------------------------------------------------------
// 2022. 1학기 STL 3월 10일 목요일
// 수78목23 (2주 1일)
// 
// 
// 템플릿 - 자료형에 관계없는 함수와 클래스를 만드는 C++ 핵심 keyword
//		  - 이러한 방식의 코딩을 generic 
// 
// 많은 데이터를 다루는 연습 - 파일
// 
//----------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <ctime>
#include "save.h"

using namespace std;

// [문제] 엔진과 분포를 이용하여 임의의 값을 갖는 int 1000개를 화면에 출력하라.
random_device rd;
default_random_engine dre{ rd() };

int main()
{
	std::uniform_int_distribution uid;

	for (int i = 0; i < 1000; ++i)
	{
		cout << uid(dre) << "\t";
	}
	cout << endl;

	save("소스.cpp");
}

//int main()
//{
//
//	srand(time(NULL));
//
//	int a[1000]{};
//
//	for (int i : a)
//	{
//		i = rand();
//		cout << i << "\t";
//	}
//
//	//save("소스.cpp");
//}

//int main()
//{
//	std::random_device rd;
//	std::mt19937 gen(rd());
//	std::uniform_int_distribution<int> dis(0, 10000000);
//
//	int a[1000]{};
//
//	for (int i : a)
//	{
//		i = dis(gen);
//		cout << i << "\t";
//	}
//
//	//save("소스.cpp");
//}

